import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.scss'
import Task from "../components/Task";
import {useCallback, useContext, useEffect, useState} from "react";
import {WebsocketContext} from "../contexts/WebsocketContext";
import _ from 'lodash';
import Footer from "../components/Footer";
import Favicon from "../components/Favicon";

export default function Home() {
  const connectEvent = 'connect';
  const tasksEvent = 'tasks';
  const downloadProgressEvent = 'download-progress';
  const uploadProgressEvent = 'upload-progress';
  const [tasks, setTasks] = useState([]);
  const [downloadProgress, setDownloadProgress] = useState({});
  const [uploadProgress, setUploadProgress] = useState({});

  const socket = useContext(WebsocketContext);
  const startEmit = useCallback(() => {
    console.log('emit ');
    socket.emit(tasksEvent);
    socket.emit(downloadProgressEvent);
    socket.emit(uploadProgressEvent);
  },[socket]);

  useEffect(() => {
    socket.on(connectEvent, () => {
      console.log('socket connected');
    });
    socket.on(tasksEvent, (tasksPayload) =>{
      console.log('tasksPayload: ', tasksPayload);
      setTasks(tasksPayload)
    });
    socket.on(downloadProgressEvent, (payload) => {
      console.log('on download-progress downloadProgress: ', payload);

      if(_.isObject(payload)){
        const { data, progress } = payload;
        setDownloadProgress({[data.id]: data.progress});
      }
    })
    socket.on(uploadProgressEvent, (payload) => {
      console.log('on upload-progress uploadProgress: ', payload);
      if(payload){
        const { data, progress } = payload;
        setUploadProgress({[data.id]: data.progress});
      }
    })
    startEmit();

    return () => {
      console.log('Unregister socket events');
      socket.off(connectEvent);
      socket.off(tasksEvent);
      socket.off(downloadProgressEvent);
      socket.off(uploadProgressEvent)
    }
  }, [socket, startEmit]);
  console.log('tasks: ', tasks);
  console.log('download progress: ', downloadProgress);
  console.log('upload progress: ', uploadProgress);
  return (
    <div className={styles.container}>
      <Head>
        <title>Dow Dash</title>
        <meta name="description" content="Generated by create next app" />
        <Favicon />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Dow Dash
        </h1>
        <p className={styles.description}>
         Dashboard for getting information about task processes
        </p>

        <div className={styles.grid}>
          {
            tasks.map(task=>(
              <Task
                key={task.id}
                name={task.name}
                url={task.url}
                datetime={task.datetime}
                stage={task.stage}
                download={_.get(downloadProgress, task.id, 0)}
                upload={_.get(uploadProgress, task.id, 0)}
              />
            ))
          }
        </div>
      </main>
      <Footer/>
    </div>
  )
}
